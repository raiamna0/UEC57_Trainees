@model WebformReal.Models.UEC_UEC57

@{
    ViewBag.Title = "YKP";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title UEC3</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }

        .navbar {
            background-color: #255932; /* Purple background color */
            color: #fff; /* Text color */
            text-align: center;
            padding: 15px 0;
            position: fixed;
            top: 0; /* Stick it to the top of the page */
            width: 100%;
            height: 55px;
            z-index: 2; /* Place the navbar above the menu overlay */
            display: flex;
            justify-content: space-between;
        }






        .empty-space {
            height: 100px; /* Adjust the height as needed */
        }



        /* Menu button styles */
        .menu-button {
            cursor: pointer;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 25px;
            width: 53px;
            z-index: 3; /* Place the menu button above the menu overlay */
            position: relative; /* Add relative positioning to use z-index */
            padding: 12px;
        }



        .menu-icon {
            background-color: #fff;
            height: 3px;
            width: 30px;
            border-radius: 2px;
            margin-left: 20px;
            margin-top: 5px;
        }



        /* Menu styles */
        .menu {
            position: fixed;
            top: 84px; /* Adjust this value to match your navbar height */
            left: -250px; /* Initially hide the menu off-screen */
            width: 250px;
            height: 100%;
            background-color: #2c5d42;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 1; /* Place the menu below the navbar */
            overflow-y: auto;
            transition: left 0.3s ease-in-out;
        }



            .menu ul {
                list-style-type: none;
                padding: 0;
                margin: 0;
            }



            .menu li {
                border-bottom: 1px solid #ccc;
            }



            .menu a {
                text-decoration: none;
                color: white;
                display: block;
                padding: 20px;
            }



                .menu a:hover {
                    background-color: #25775b;
                    /*padding: 6px;
        margin-right: 40px;*/
                }



            /* Show the menu when the show-menu class is applied */
            .menu.show-menu {
                left: 0;
                pointer-events: auto;
            }




        /* Menu overlay styles */
        .menu-overlay {
            display: none;
            position: fixed;
            top: 84px;
            left: 0;
            width: 100%;
            height: calc(100% - 84px);
            background-color: rgba(0, 0, 0, 0.3);
            z-index: 0; /* Place the menu overlay below the menu */
        }



        /* Display the menu overlay when the show-menu class is applied */
        .menu.show-menu + .menu-overlay {
            display: block;
        }



        /* Create New Item Button styles */
        .create-button {
            /*text-align: right;*/ /* Align to the right */
            /*margin-top: -20px;*/ /* Adjust the margin to move it up */
            /*margin-right: 10px;*/
            display: flex;
        }



        .create-link {
            /* Green button color */
            color: #fff;
            text-decoration: none;
            padding: 10px;
            margin: 10px;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s;
            width: 93.3px;
        }



        .form-group.inline-fields {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding: 15px;
            background-color: #dff5e5;
        }


        .inline-fields .field-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            padding-left: 15px;
            width: calc(33.33% - 20px);
            margin-right: 20px;
        }

            .inline-fields .field-container .control-label {
                width: 100%;
                text-align: left;
                margin-bottom: 5px;
                font-weight: bold;
            }

            .inline-fields .field-container .form-control,
            .inline-fields .field-container select {
                width: 100%;
            }

        .form-horizontal {
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 3px;
            background-color: #dff5e5;
            width: 1000px;
            margin: 200px auto;
        }

        .yay {
            justify-content: center;
            background-color: #255932;
            display: flex;
            font-size: medium;
            color: white;
            border-top-left-radius: 3px;
            border-top-right-radius: 3px;
            margin-bottom: 25px;
        }

        .button1 {
            display: flex;
            justify-content: space-evenly;
            padding: 15px;
            /*background-color: #678b1c;*/
            color: #fff;
            text-decoration: none;
            border-radius: 3px;
        }




        .ab {
            display: inline-block;
            padding: 7px 20px 9px;
            background-color: #678b1c;
            color: #fff;
            text-decoration: none;
            border-radius: 4px;
            border: none;
            font-size: 12px;
        }

            .ab:hover {
                background: #25775b;
            }

        /* Style the submit button */
        .button[type="submit"] {
            padding: 10px;
            background-color: darkgray;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            background: darkgray;
        }

        /* Style the "Back to List" button */
        /* Base button styles */
        /* Style the "Back to List" button */
        .button.button-primary {
            display: inline-block;
            padding: 10px 20px;
            background-color: darkgray;
            color: #fff;
            text-decoration: none;
            border-radius: 4px;
            margin-top: 10px;
            transition: background-color 0.3s, transform 0.3s;
        }

            /* Style the "Back to List" button on hover */
            .button.button-primary:hover {
                background-color: #555;
                transform: translateY(-3px); /* Add a slight lift on hover */
            }



        .btn-group {
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            /* background-color: lightslategrey;*/
            padding-bottom: 10px;
        }


        select {
            padding-bottom: 10px;
            border: 0;
            outline: 0;
            font: inherit;
            height: 2em;
            padding: 0 4em 0 1em;
            border-radius: 0.25em;
            box-shadow: 0 0 1em 0 rgba(0, 0, 0, 0.2);
            cursor: pointer;
        }



        option {
            color: inherit;
        }
        /* Remove focus outline */
        :focus {
            outline: none;
        }
        /* Remove IE arrow */
        ::-ms-expand {
            display: none;
        }

        input[type="text"] {
            width: 77%;
            padding-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            height: 2em;
            padding: 0 0em 0 0em;
        }
    </style>
</head>
<body style="font-size:12px; ">
    <div class="navbar-container">
        <div class="navbar">
            <div class="menu-button" id="menuButton">
                <div class="menu-icon"></div>
                <div class="menu-icon"></div>
                <div class="menu-icon"></div>
            </div>
            <h1>YKP</h1>
            <div class="create-button">
                <div class="create-link"></div>
            </div>

        </div>
        <div class="menu" id="menu">
            <ul>
                <li class="@Html.Raw(ViewContext.RouteData.Values["Action"].ToString() == "UEC_UEC57_AlamIndex" ? "active" : "")">@Html.ActionLink("Qarn Alam Steam", "UEC_UEC57_AlamIndex", "UEC_UEC57")</li>
                <li class="@Html.Raw(ViewContext.RouteData.Values["Action"].ToString() == "UEC_UEC57_AmalIndex" ? "active" : "")">@Html.ActionLink("Amal Steam", "UEC_UEC57_AmalIndex", "UEC_UEC57")</li>
                <li class="@Html.Raw(ViewContext.RouteData.Values["Action"].ToString() == "UEC_UEC57_HarweelIndex" ? "active" : "")">@Html.ActionLink("Harweel", "UEC_UEC57_HarweelIndex", "UEC_UEC57")</li>
                <li class="@Html.Raw(ViewContext.RouteData.Values["Action"].ToString() == "UEC_UEC57_BirbaIndex" ? "active" : "")">@Html.ActionLink("Birba", "UEC_UEC57_BirbaIndex", "UEC_UEC57")</li>
                <li class="@Html.Raw(ViewContext.RouteData.Values["Action"].ToString() == "UEC_UEC57_AlnoorIndex" ? "active" : "")">@Html.ActionLink("Al noor", "UEC_UEC57_AlnoorIndex", "UEC_UEC57")</li>
                <li class="@Html.Raw(ViewContext.RouteData.Values["Action"].ToString() == "UEC_UEC57_RHIPIndex" ? "active" : "")">@Html.ActionLink("RHIP", "UEC_UEC57_RHIPIndex", "UEC_UEC57")</li>
                <li class="@Html.Raw(ViewContext.RouteData.Values["Action"].ToString() == "UEC_UEC57_YKPIndex" ? "active" : "")">@Html.ActionLink("YKP", "UEC_UEC57_YKPIndex", "UEC_UEC57")</li>
            </ul>
        </div>
        <div class="menu-overlay" id="menuOverlay"></div>
    </div>
    
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <div class="yay">
                <h3>Create</h3>
            </div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group inline-fields" style="justify-content: inherit;">
                <div class="field-container">
                    @Html.Label("Corrosion Loops/Unit Name", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.TextAreaFor(model => model.UEC_UEC57_Alam_UnitName, new { @class = "form-control", style = "height: 100px;" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_UnitName, "", new { @class = "text-danger" })
                </div>
                <div class="field-container" style="width: 500px;">
                    @Html.Label("Unit Description", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.TextAreaFor(model => model.UEC_UEC57_Alam_UnitDescription, new { @class = "form-control", style = "height: 100px; max-width: 100%;" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_UnitDescription, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group inline-fields">

                <div class="field-container">
                    @Html.Label("Built As Design", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_BuiltAsDesign, new List<SelectListItem>
                           {new SelectListItem { Text = "Select Built As Design", Value = " " },

                         new SelectListItem { Text = "Yes", Value = "Yes"},
                           new SelectListItem { Text = "No", Value = "No"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_BuiltAsDesign, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("IOW (Within / Outside)", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_IOW, new List<SelectListItem>
                               {
                       new SelectListItem { Text = "Select IOW (Within / Outside)", Value = " " },

                             new SelectListItem { Text = "Yes", Value = "Yes"},
                               new SelectListItem { Text = "No", Value = "No"},
                               new SelectListItem { Text = "Blank", Value = " "}
                               }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_IOW, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("Based Line Inspection", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_BasedLineInspection, new List<SelectListItem>
                           {
                         new SelectListItem { Text = "Select Based Line Inspection", Value = " " },
                         new SelectListItem { Text = "Yes", Value = "Yes"},
                           new SelectListItem { Text = "No", Value = "No"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_BasedLineInspection, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group inline-fields">

                <div class="field-container">
                    @Html.Label("Compliance With CMM", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_CompliancewithCMM, new List<SelectListItem>
                           {
                         new SelectListItem { Text = "Select Compliance With CMM", Value = " " },
                         new SelectListItem { Text = "Yes", Value = "Yes"},
                           new SelectListItem { Text = "No", Value = "No"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_CompliancewithCMM, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("Inspection Does Not Reveal Any Major Findings", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_Inspection, new List<SelectListItem>
                           {

                         new SelectListItem { Text = "Select Inspection Does Not Reveal Any Major Findings", Value = " " },
                         new SelectListItem { Text = "Yes", Value = "Yes"},
                           new SelectListItem { Text = "No", Value = "No"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_Inspection, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("No Temporary Repair (Clamps, Batches)", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_NoTemporaryRepair, new List<SelectListItem>
                           {
                    new SelectListItem { Text = "Select No Temporary Repair (Clamps, Batches)", Value = " " },
                         new SelectListItem { Text = "Yes", Value = "Yes"},
                           new SelectListItem { Text = "No", Value = "No"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_NoTemporaryRepair, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group inline-fields">

                <div class="field-container">
                    @Html.Label("Compliance To Peformance Standard", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_CompliancetoPerformanceStandard, new List<SelectListItem>
                           {
                             new SelectListItem { Text = "Select Compliance To Peformance Standard", Value = " " },
                         new SelectListItem { Text = "Yes", Value = "Yes"},
                           new SelectListItem { Text = "No", Value = "No"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_CompliancetoPerformanceStandard, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("FSR / Quality", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_FSR, new List<SelectListItem>
                           {
                             new SelectListItem { Text = "Select FSR / Quality", Value = " " },
                           new SelectListItem { Text = "Yes", Value = "Yes"},
                           new SelectListItem { Text = "No", Value = "No"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_FSR, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("Risk Level", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_RiskLevel, new List<SelectListItem>
                           {
                             new SelectListItem { Text = "Select Risk Level",Value = " " },
                           new SelectListItem { Text = "High", Value = "High"},
                           new SelectListItem { Text = "Medium", Value = "Medium"},
                           new SelectListItem { Text = "Low", Value = "Low"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_RiskLevel, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group inline-fields">

                <div class="field-container">
                    @Html.Label("Current Status ", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.EditorFor(model => model.UEC_UEC57_Alam_CurrentStatus, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_CurrentStatus, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("Threats", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.EditorFor(model => model.UEC_UEC57_Alam_Threats, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_Threats, "", new { @class = "text-danger" })
                </div>
                <div class="field-container">
                    @Html.Label("Probability", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_Probability, new List<SelectListItem>
                           {
                             new SelectListItem { Text =  "Select Probability",Value = " " },
                           new SelectListItem { Text = "High", Value = "High"},
                           new SelectListItem { Text = "Medium", Value = "Medium"},
                           new SelectListItem { Text = "Low", Value = "Low"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_RiskLevel, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group inline-fields">
                <div class="field-container">
                    @Html.Label("Consequence", htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.DropDownListFor(model => model.UEC_UEC57_Alam_Consequence, new List<SelectListItem>
                           {
                             new SelectListItem { Text =  "Select Consequence",Value = " " },
                           new SelectListItem { Text = "High", Value = "High"},
                           new SelectListItem { Text = "Medium", Value = "Medium"},
                           new SelectListItem { Text = "Low", Value = "Low"},
                           new SelectListItem { Text = "Blank", Value = " "}
                           }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UEC_UEC57_Alam_Consequence, "", new { @class = "text-danger" })
                </div>
                <div class="field-container"></div>
                <div class="field-container"></div>
            </div>
            <div class="col-md-offset-2 col-md-10 hii button1">
                <a class="btn btn-group ab" href="@Url.Action("UEC_UEC57_YKPIndex")">Back to List</a>
                <button type="submit" class="btn btn-primary ab">Create</button>
            </div>

        </div>
    }

<script>

    document.addEventListener("DOMContentLoaded", function () {
        const menuButton = document.getElementById("menuButton");
        const menu = document.getElementById("menu");
        const menuOverlay = document.getElementById("menuOverlay");



        menuButton.addEventListener("click", function () {
            menu.classList.toggle("show-menu");
            menuOverlay.classList.toggle("show-menu-overlay");
        });



        menuOverlay.addEventListener("click", function (event) {
            if (event.target === menuOverlay) {
                menu.classList.remove("show-menu");
                menuOverlay.classList.remove("show-menu-overlay");
            }
        });
    });
</script>
</body>
</html>
